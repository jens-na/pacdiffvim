#!/bin/bash
#
# pacdiffvim, a pacnew/pacorig/pacsave file updater for vim enthsiasts.
# 
# Copyright (C) 2013, Jens Nazarenus <jens@0x6a.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

declare -r myname='pacdiffvim'
declare -r myversion='1.2.0'
declare -r tmpfile='/tmp/pacdiffvim.vim'

vimprog=${VIMPROG:-vim}
diffsearchpath=/etc

vim_init=0
vim_cmd=
vim_options=
vim_files=

# returns the .pacnew, .pacorig, .pacsave files with find.
get_files() {
	find "$diffsearchpath" -writable -regextype posix-extended -regex ".+\.pac(new|save|orig)" -print0 2>/dev/null
}

# prints usage info for this shell script
usage() {
	echo -e  "Usage: $myname [OPTION]"
	echo -en "A pacnew/pacorig/pacsave file updater for vim enthusiasts.\n\n"
	echo -e  "  -r, --root <path>       Sets an alternative path where to search for .pacnew files"
	echo -e "  -V, --version           Shows version info of $myname"
	echo -en "  -h, --help              Shows this help\n\n"
	
	echo -e "Report bugs to: jens@0x6a.de"
	echo -e "$myname home page: <http://github.com/jens-na/$myname/>"
}

# prints the version info of this shell script
version() {
	printf "%s %s\n" "$myname" "$myversion"
	echo "Copyright (C) 2013 Jens Nazarenus <jens@0x6a.de>"
}

cat > $tmpfile << EOF
"--------------------------------------------------------------------
" temporarily vim file with functions to extend the standard vim 
" configuration.
" 
" This file is automatically generated and should not be deleted 
" or modified. You can delete this file if you are sure there is 
" no process of 'pacdiffvim' currently running.
"
" $myname - $myversion
"--------------------------------------------------------------------

if exists('g:loaded_pacdiffvim') || &cp || v:version < 700
  finish
endif
let g:loaded_pacdiffvim = 1

" vim function to save the file and delete the .pacnew file
" afterwards. 
function! OK()
	wincmd l
	write

	if bufexists(expand('%:p') . ".pacnew") != 0
		let file=expand('%:p') . ".pacnew"
	elseif bufexists(expand('%:p') . ".pacorig") != 0
		let file=expand('%:p') . ".pacorig"
	elseif bufexists(expand('%:p') . ".pacsave") != 0
		let file=expand('%:p') . ".pacsave"
	endif
	
	let success = system("rm -v " . file)
	if success != 0
		throw "PacNew: Could not delete " . file
	endif

	" close tab or quit pacdiffvim	
	try
		tabclose
	catch /E784:/
		quitall!	
	endtry
endfunction

" commands
command OK :call OK()
EOF

if [ $# -gt 0 ]; then
	case $1 in
		-V|--version)
			version;
			exit 0;;
		-h|--help)
			usage
			exit 0;;
		-r|--root)
			if [ -z $2 ]; then
				echo "Parameter -r (--root) requires an argument."
				exit 1
			fi
			diffsearchpath="$2"
			;;
		*)
			usage
			exit 1;;
	esac
			
fi

which "$vimprog" >/dev/null 2>&1

if [ $? -ne 0 ]; then
        echo "Could not find $vimprog in PATH."
	exit 1
fi

vim_options="+\""

while IFS= read -u 3 -r -d '' pacfile; do
	file="${pacfile%.pac*}"
	file_type="pac${pacfile##*.pac}"

	if [ ! -f "$file" ]; then
		echo "$file does not exist. Removing $pacfile..."
		rm -vi "$pacfile"
	fi

	if cmp -s "$pacfile" "$file"; then
		echo "$file and $pacfile are identical. Removing $pacfile..."
		rm -v "$pacfile"
	else
		if [ $vim_init -eq 0 ]; then
			vim_options="$vim_options vert diffsplit %.$file_type"
			vim_init=1
		else
			vim_options="$vim_options | silent tabnew | silent only | silent n | silent vert diffsplit %.$file_type"
	
		fi
		vim_files="$vim_files $file"
	fi

done 3< <(get_files)

# if there are no files to merge, exit with return code 0.
if [ -z "$vim_files" ]; then
	exit 0
fi

vim_options="$vim_options | silent tabnext\""
vim_cmd="$vimprog -S $tmpfile $vim_files $vim_options"

eval $vim_cmd
